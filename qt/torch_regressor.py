# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\SayfutdinovaAMa\PycharmProjects\geovel_1.0\qt\torch_regressor.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_TorchNNRegressor(object):
    def setupUi(self, TorchNNRegressor):
        TorchNNRegressor.setObjectName("TorchNNRegressor")
        TorchNNRegressor.resize(579, 387)
        self.groupBox = QtWidgets.QGroupBox(TorchNNRegressor)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 325, 219))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.checkBox_choose_param = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_choose_param.setStyleSheet("background-color: rgb(252, 204, 165);")
        self.checkBox_choose_param.setObjectName("checkBox_choose_param")
        self.gridLayout.addWidget(self.checkBox_choose_param, 0, 0, 1, 2)
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        self.doubleSpinBox_choose_lr = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_choose_lr.setDecimals(6)
        self.doubleSpinBox_choose_lr.setSingleStep(0.01)
        self.doubleSpinBox_choose_lr.setProperty("value", 0.0001)
        self.doubleSpinBox_choose_lr.setObjectName("doubleSpinBox_choose_lr")
        self.gridLayout.addWidget(self.doubleSpinBox_choose_lr, 1, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1)
        self.doubleSpinBox_choose_dropout = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_choose_dropout.setDecimals(6)
        self.doubleSpinBox_choose_dropout.setSingleStep(0.01)
        self.doubleSpinBox_choose_dropout.setProperty("value", 0.01)
        self.doubleSpinBox_choose_dropout.setObjectName("doubleSpinBox_choose_dropout")
        self.gridLayout.addWidget(self.doubleSpinBox_choose_dropout, 2, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 0, 1, 1)
        self.doubleSpinBox_choose_decay = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_choose_decay.setDecimals(6)
        self.doubleSpinBox_choose_decay.setSingleStep(0.01)
        self.doubleSpinBox_choose_decay.setProperty("value", 0.001)
        self.doubleSpinBox_choose_decay.setObjectName("doubleSpinBox_choose_decay")
        self.gridLayout.addWidget(self.doubleSpinBox_choose_decay, 3, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 4, 0, 1, 1)
        self.doubleSpinBox_choose_reagular = QtWidgets.QDoubleSpinBox(self.groupBox)
        self.doubleSpinBox_choose_reagular.setDecimals(6)
        self.doubleSpinBox_choose_reagular.setSingleStep(0.01)
        self.doubleSpinBox_choose_reagular.setProperty("value", 0.0001)
        self.doubleSpinBox_choose_reagular.setObjectName("doubleSpinBox_choose_reagular")
        self.gridLayout.addWidget(self.doubleSpinBox_choose_reagular, 4, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 5, 0, 1, 1)
        self.lineEdit_choose_layers = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_choose_layers.setObjectName("lineEdit_choose_layers")
        self.gridLayout.addWidget(self.lineEdit_choose_layers, 5, 1, 1, 1)
        self.layoutWidget_2 = QtWidgets.QWidget(TorchNNRegressor)
        self.layoutWidget_2.setGeometry(QtCore.QRect(20, 230, 321, 141))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.layoutWidget_2)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_11 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_11.setObjectName("label_11")
        self.gridLayout_5.addWidget(self.label_11, 0, 0, 1, 1)
        self.spinBox_epochs = QtWidgets.QSpinBox(self.layoutWidget_2)
        self.spinBox_epochs.setMaximum(10000)
        self.spinBox_epochs.setProperty("value", 100)
        self.spinBox_epochs.setObjectName("spinBox_epochs")
        self.gridLayout_5.addWidget(self.spinBox_epochs, 0, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_12.setObjectName("label_12")
        self.gridLayout_5.addWidget(self.label_12, 1, 0, 1, 1)
        self.comboBox_optimizer = QtWidgets.QComboBox(self.layoutWidget_2)
        self.comboBox_optimizer.setObjectName("comboBox_optimizer")
        self.comboBox_optimizer.addItem("")
        self.comboBox_optimizer.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_optimizer, 1, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_13.setObjectName("label_13")
        self.gridLayout_5.addWidget(self.label_13, 2, 0, 1, 1)
        self.comboBox_loss = QtWidgets.QComboBox(self.layoutWidget_2)
        self.comboBox_loss.setObjectName("comboBox_loss")
        self.comboBox_loss.addItem("")
        self.comboBox_loss.addItem("")
        self.comboBox_loss.addItem("")
        self.comboBox_loss.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_loss, 2, 1, 1, 1)
        self.label_17 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_17.setObjectName("label_17")
        self.gridLayout_5.addWidget(self.label_17, 3, 0, 1, 1)
        self.comboBox_activation_func = QtWidgets.QComboBox(self.layoutWidget_2)
        self.comboBox_activation_func.setObjectName("comboBox_activation_func")
        self.comboBox_activation_func.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_activation_func, 3, 1, 1, 1)
        self.layoutWidget_3 = QtWidgets.QWidget(TorchNNRegressor)
        self.layoutWidget_3.setGeometry(QtCore.QRect(420, 280, 140, 87))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.layoutWidget_3)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.groupBox_9 = QtWidgets.QGroupBox(self.layoutWidget_3)
        self.groupBox_9.setObjectName("groupBox_9")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_9)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_cross_val = QtWidgets.QPushButton(self.groupBox_9)
        self.pushButton_cross_val.setObjectName("pushButton_cross_val")
        self.gridLayout_3.addWidget(self.pushButton_cross_val, 0, 0, 1, 1)
        self.spinBox_cross_val = QtWidgets.QSpinBox(self.groupBox_9)
        self.spinBox_cross_val.setMinimum(2)
        self.spinBox_cross_val.setProperty("value", 5)
        self.spinBox_cross_val.setObjectName("spinBox_cross_val")
        self.gridLayout_3.addWidget(self.spinBox_cross_val, 0, 1, 1, 1)
        self.gridLayout_7.addWidget(self.groupBox_9, 0, 0, 1, 2)
        self.pushButton_train = QtWidgets.QPushButton(self.layoutWidget_3)
        self.pushButton_train.setStyleSheet("background-color: rgb(252, 204, 165);")
        self.pushButton_train.setObjectName("pushButton_train")
        self.gridLayout_7.addWidget(self.pushButton_train, 1, 0, 1, 1)
        self.checkBox_save_model = QtWidgets.QCheckBox(self.layoutWidget_3)
        self.checkBox_save_model.setEnabled(True)
        self.checkBox_save_model.setObjectName("checkBox_save_model")
        self.gridLayout_7.addWidget(self.checkBox_save_model, 1, 1, 1, 1)
        self.widget = QtWidgets.QWidget(TorchNNRegressor)
        self.widget.setGeometry(QtCore.QRect(360, 10, 201, 91))
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_14 = QtWidgets.QLabel(self.widget)
        self.label_14.setObjectName("label_14")
        self.gridLayout_4.addWidget(self.label_14, 0, 0, 1, 1)
        self.comboBox_dataset = QtWidgets.QComboBox(self.widget)
        self.comboBox_dataset.setObjectName("comboBox_dataset")
        self.comboBox_dataset.addItem("")
        self.comboBox_dataset.addItem("")
        self.gridLayout_4.addWidget(self.comboBox_dataset, 0, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_4, 0, 0, 1, 1)
        self.checkBox_early_stop = QtWidgets.QCheckBox(self.widget)
        self.checkBox_early_stop.setObjectName("checkBox_early_stop")
        self.gridLayout_2.addWidget(self.checkBox_early_stop, 1, 0, 1, 1)
        self.checkBox_threshold = QtWidgets.QCheckBox(self.widget)
        self.checkBox_threshold.setObjectName("checkBox_threshold")
        self.gridLayout_2.addWidget(self.checkBox_threshold, 2, 0, 1, 1)

        self.retranslateUi(TorchNNRegressor)
        QtCore.QMetaObject.connectSlotsByName(TorchNNRegressor)

    def retranslateUi(self, TorchNNRegressor):
        _translate = QtCore.QCoreApplication.translate
        TorchNNRegressor.setWindowTitle(_translate("TorchNNRegressor", "TorchNNRegressor"))
        self.checkBox_choose_param.setText(_translate("TorchNNRegressor", "Choose parameters"))
        self.label.setToolTip(_translate("TorchNNRegressor", "Этот параметр контролирует размер шага, с которым обновляются веса модели во время обучения. Более высокая скорость обучения может привести к более быстрой сходимости, но также может вызвать перепрыгивание через оптимальное решение."))
        self.label.setText(_translate("TorchNNRegressor", "learning rate"))
        self.doubleSpinBox_choose_lr.setToolTip(_translate("TorchNNRegressor", "Этот параметр контролирует размер шага, с которым обновляются веса модели во время обучения. Более высокая скорость обучения может привести к более быстрой сходимости, но также может вызвать перепрыгивание через оптимальное решение."))
        self.label_2.setToolTip(_translate("TorchNNRegressor", "Это техника регуляризации, используемая для предотвращения переобучения. Она случайным образом отключает (обнуляет) определенный процент входных данных слоя во время обучения, делая модель более устойчивой."))
        self.label_2.setText(_translate("TorchNNRegressor", "dropout"))
        self.doubleSpinBox_choose_dropout.setToolTip(_translate("TorchNNRegressor", "Это техника регуляризации, используемая для предотвращения переобучения. Она случайным образом отключает (обнуляет) определенный процент входных данных слоя во время обучения, делая модель более устойчивой."))
        self.label_3.setToolTip(_translate("TorchNNRegressor", "<html><head/><body><p>L2-регуляризация - добавляет штраф к функции потерь, побуждая модель изучать более мелкие веса и снижая риск переобучения.</p></body></html>"))
        self.label_3.setText(_translate("TorchNNRegressor", "weight decay"))
        self.doubleSpinBox_choose_decay.setToolTip(_translate("TorchNNRegressor", "<html><head/><body><p>L2-регуляризация, это добавляет штраф к функции потерь, побуждая модель изучать более мелкие веса и снижая риск </p></body></html>"))
        self.label_4.setToolTip(_translate("TorchNNRegressor", "Этот гиперпараметр контролирует силу регуляризации, применяемой к весам модели, помогая предотвратить переобучение."))
        self.label_4.setText(_translate("TorchNNRegressor", "regularization"))
        self.doubleSpinBox_choose_reagular.setToolTip(_translate("TorchNNRegressor", "Этот гиперпараметр контролирует силу регуляризации, применяемой к весам модели, помогая предотвратить переобучение."))
        self.label_5.setToolTip(_translate("TorchNNRegressor", "количество и размер скрытых слоев в нейронной сети."))
        self.label_5.setText(_translate("TorchNNRegressor", "hidden layers"))
        self.lineEdit_choose_layers.setToolTip(_translate("TorchNNRegressor", "количество и размер скрытых слоев в нейронной сети."))
        self.lineEdit_choose_layers.setText(_translate("TorchNNRegressor", "50 100 150 50"))
        self.label_11.setToolTip(_translate("TorchNNRegressor", "Количество раз, когда вся обучающая выборка проходит через модель во время обучения."))
        self.label_11.setText(_translate("TorchNNRegressor", "epochs"))
        self.spinBox_epochs.setToolTip(_translate("TorchNNRegressor", "Количество раз, когда вся обучающая выборка проходит через модель во время обучения."))
        self.label_12.setToolTip(_translate("TorchNNRegressor", "<p>Алгоритм оптимизации:</p>\n"
"<p>Adam показывает хорошие результаты во многих случаях и является удачным выбором по умолчанию.</p>\n"
"<p>SGD может быть полезен, если вы работаете с очень большими наборами данных.</p>\n"
"<p>L-BFGS может быть целесообразен, если у вас небольшое количество параметров и вам необходима высокая точность.</p>"))
        self.label_12.setText(_translate("TorchNNRegressor", "optimizer"))
        self.comboBox_optimizer.setToolTip(_translate("TorchNNRegressor", "<p>Алгоритм оптимизации:</p>\n"
"<p>Adam показывает хорошие результаты во многих случаях и является удачным выбором по умолчанию.</p>\n"
"<p>SGD может быть полезен, если вы работаете с очень большими наборами данных.</p>\n"
"<p>L-BFGS может быть целесообразен, если у вас небольшое количество параметров и вам необходима высокая точность.</p>"))
        self.comboBox_optimizer.setItemText(0, _translate("TorchNNRegressor", "Adam"))
        self.comboBox_optimizer.setItemText(1, _translate("TorchNNRegressor", "SGD"))
        self.label_13.setToolTip(_translate("TorchNNRegressor", "<html><head/><body><p>Функция, используемая для вычисления ошибки между предсказаниями и истинными метками:</p><p><span style=\" font-family:\'YS Text,Arial,Helvetica,sans-serif\'; font-size:18px; font-weight:600; color:#000000; background-color:#ffffff;\">MSE (средняя квадратическая ошибка) </span><span style=\" font-family:\'YS Text,Arial,Helvetica,sans-serif\'; font-size:18px; color:#000000; background-color:#ffffff;\">— это оценка среднего значения квадрата ошибок, различие между предсказанием и фактическим значением. Эту метрику удобно использовать для выявления аномалий.</span></p><p><span style=\" font-family:\'YS Text,Arial,Helvetica,sans-serif\'; font-size:18px; font-weight:600; color:#000000; background-color:#ffffff;\">MAE (средняя абсолютная ошибка)</span><span style=\" font-family:\'YS Text,Arial,Helvetica,sans-serif\'; font-size:18px; color:#000000; background-color:#ffffff;\"> — это оценка того, насколько близки предсказания к фактическим значениями. Эта метрика менее чувствительна к выбросам и может дать общее представление о качестве модели.</span></p><p><span style=\" font-family:\'sans-serif\'; font-size:14px; font-weight:696; color:#202122; background-color:#ffffff;\">Функция потерь Хьюбера</span><span style=\" font-family:\'sans-serif\'; font-size:14px; color:#202122; background-color:#ffffff;\"> — </span><a href=\"https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BF%D0%BE%D1%82%D0%B5%D1%80%D1%8C\"><span style=\" font-family:\'sans-serif\'; font-size:14px; color:#0645ad; background-color:#ffffff;\">функция потерь</span></a><span style=\" font-family:\'sans-serif\'; font-size:14px; color:#202122; background-color:#ffffff;\">, используемая в устойчивой </span><a href=\"https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%80%D0%B5%D1%81%D1%81%D0%B8%D1%8F_(%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)\"><span style=\" font-family:\'sans-serif\'; font-size:14px; color:#0645ad; background-color:#ffffff;\">регрессии</span></a><span style=\" font-family:\'sans-serif\'; font-size:14px; color:#202122; background-color:#ffffff;\">, которая менее чувствительна к выбросам, чем квадратичная ошибка. И</span><span style=\" font-family:\'sohne,Helvetica Neue,Helvetica,Arial,sans-serif\'; font-size:14px; color:#6b6b6b; background-color:#ffffff;\">спользует L2 для малых ошибок и L1 — для больших.</span></p><p><span style=\" font-family:\'sohne,Helvetica Neue,Helvetica,Arial,sans-serif\'; font-size:14px; font-weight:600; color:#6b6b6b; background-color:#ffffff;\">Сглаженная L1-потеря</span><span style=\" font-family:\'sohne,Helvetica Neue,Helvetica,Arial,sans-serif\'; font-size:14px; color:#6b6b6b; background-color:#ffffff;\"> практически эквивалентна потере Хьюбера с дополнительным бета-параметром. </span></p></body></html>"))
        self.label_13.setText(_translate("TorchNNRegressor", "loss function"))
        self.comboBox_loss.setToolTip(_translate("TorchNNRegressor", "<html><head/><body><p>Функция, используемая для вычисления ошибки между предсказаниями и истинными метками:</p><p><span style=\" font-weight:600;\">BCELoss (Binary Cross-Entropy Loss)</span>: Это функция потерь, используемая для задач двоичной классификации</p><p><span style=\" font-weight:600;\">BCEWithLogitsLoss</span>: Этот вариант функции потерь объединяет вычисление двоичной перекрестной энтропии с применением сигмоидной активации на выходном слое. </p><p><span style=\" font-weight:600;\">CrossEntropyLoss</span>: Эта функция потерь используется для задач многоклассовой классификации, где выходы модели должны быть вероятностями принадлежности к каждому классу.</p>"))
        self.comboBox_loss.setItemText(0, _translate("TorchNNRegressor", "MSE"))
        self.comboBox_loss.setItemText(1, _translate("TorchNNRegressor", "MAE"))
        self.comboBox_loss.setItemText(2, _translate("TorchNNRegressor", "HuberLoss"))
        self.comboBox_loss.setItemText(3, _translate("TorchNNRegressor", "SmoothL1Loss"))
        self.label_17.setToolTip(_translate("TorchNNRegressor", "<p>Функция активации, используемая в скрытых слоях нейронной сети</p>\n"
"<ul><li><b>ReLU</b> является отличным выбором по умолчанию и хорошо работает во многих случаях <i>(возвращает значение x, если x больше 0, и 0 в противном случае)<i/>.</li>\n"
"<li><b>Sigmoid</b> лучше всего подходит для двоичной классификации, где необходимо получить вероятностные прогнозы <i>(S-образная функция, которая отображает входные значения в диапазон от 0 до 1)</i>.</li>\n"
"<li><b>Tanh</b> может быть предпочтительнее, чем sigmoid, когда требуется, чтобы выходы были центрированы вокруг нуля <i>(похожая на сигмоид функция, но она отображает входные значения в диапазон от -1 до 1)</i>. </li></ul>"))
        self.label_17.setText(_translate("TorchNNRegressor", "activation func"))
        self.comboBox_activation_func.setToolTip(_translate("TorchNNRegressor", "<p>Функция активации, используемая в скрытых слоях нейронной сети</p>\n"
"<ul><li><b>ReLU</b> является отличным выбором по умолчанию и хорошо работает во многих случаях <i>(возвращает значение x, если x больше 0, и 0 в противном случае)<i/>.</li>\n"
"<li><b>Sigmoid</b> лучше всего подходит для двоичной классификации, где необходимо получить вероятностные прогнозы <i>(S-образная функция, которая отображает входные значения в диапазон от 0 до 1)</i>.</li>\n"
"<li><b>Tanh</b> может быть предпочтительнее, чем sigmoid, когда требуется, чтобы выходы были центрированы вокруг нуля <i>(похожая на сигмоид функция, но она отображает входные значения в диапазон от -1 до 1)</i>. </li></ul>"))
        self.comboBox_activation_func.setItemText(0, _translate("TorchNNRegressor", "ReLU"))
        self.groupBox_9.setToolTip(_translate("TorchNNRegressor", "Cross Validate by Well"))
        self.groupBox_9.setTitle(_translate("TorchNNRegressor", "Cross Validate"))
        self.pushButton_cross_val.setToolTip(_translate("TorchNNRegressor", "<p>Количество фолдов для перекрестной проверки, используемых при оценке производительности модели.</p>"))
        self.pushButton_cross_val.setText(_translate("TorchNNRegressor", "CV"))
        self.spinBox_cross_val.setToolTip(_translate("TorchNNRegressor", "Количество фолдов для перекрестной проверки, используемых при оценке производительности модели."))
        self.pushButton_train.setText(_translate("TorchNNRegressor", "TRAIN"))
        self.checkBox_save_model.setText(_translate("TorchNNRegressor", "save"))
        self.label_14.setText(_translate("TorchNNRegressor", "dataset:"))
        self.comboBox_dataset.setItemText(0, _translate("TorchNNRegressor", "shuffle"))
        self.comboBox_dataset.setItemText(1, _translate("TorchNNRegressor", "well split"))
        self.checkBox_early_stop.setToolTip(_translate("TorchNNRegressor", "<p>Эта опция позволяет автоматически останавливать обучение, когда производительность модели на проверочном наборе данных перестает улучшаться. Это помогает предотвратить переобучение.</p>"))
        self.checkBox_early_stop.setText(_translate("TorchNNRegressor", "Early stopping"))
        self.checkBox_threshold.setToolTip(_translate("TorchNNRegressor", "Этот параметр определяет порог, при котором прогнозы модели считаются положительными или отрицательными. Например, если порог установлен на 0,5, то все прогнозы, превышающие 0,5, будут классифицированы как положительные, а остальные - как отрицательные."))
        self.checkBox_threshold.setText(_translate("TorchNNRegressor", "Threshold"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    TorchNNRegressor = QtWidgets.QWidget()
    ui = Ui_TorchNNRegressor()
    ui.setupUi(TorchNNRegressor)
    TorchNNRegressor.show()
    sys.exit(app.exec_())
