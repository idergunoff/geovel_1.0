# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt/formation_ai_form.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form_formation_ai(object):
    def setupUi(self, Form_formation_ai):
        Form_formation_ai.setObjectName("Form_formation_ai")
        Form_formation_ai.resize(567, 413)
        self.gridLayout_8 = QtWidgets.QGridLayout(Form_formation_ai)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.groupBox = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.checkBox_fit_intercept = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_fit_intercept.setChecked(True)
        self.checkBox_fit_intercept.setObjectName("checkBox_fit_intercept")
        self.gridLayout.addWidget(self.checkBox_fit_intercept, 0, 0, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox, 0, 0, 1, 1)
        self.groupBox_3 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.checkBox_splitter_rnd = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_splitter_rnd.setObjectName("checkBox_splitter_rnd")
        self.gridLayout_2.addWidget(self.checkBox_splitter_rnd, 0, 0, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_3, 0, 2, 1, 2)
        self.groupBox_4 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_41 = QtWidgets.QLabel(self.groupBox_4)
        self.label_41.setObjectName("label_41")
        self.gridLayout_4.addWidget(self.label_41, 0, 1, 1, 1)
        self.label_36 = QtWidgets.QLabel(self.groupBox_4)
        self.label_36.setObjectName("label_36")
        self.gridLayout_4.addWidget(self.label_36, 0, 2, 1, 1)
        self.label_39 = QtWidgets.QLabel(self.groupBox_4)
        self.label_39.setObjectName("label_39")
        self.gridLayout_4.addWidget(self.label_39, 0, 0, 1, 1)
        self.spinBox_neighbors = QtWidgets.QSpinBox(self.groupBox_4)
        self.spinBox_neighbors.setMinimum(1)
        self.spinBox_neighbors.setMaximum(1000)
        self.spinBox_neighbors.setProperty("value", 5)
        self.spinBox_neighbors.setObjectName("spinBox_neighbors")
        self.gridLayout_4.addWidget(self.spinBox_neighbors, 1, 0, 1, 1)
        self.comboBox_knn_algorithm = QtWidgets.QComboBox(self.groupBox_4)
        self.comboBox_knn_algorithm.setObjectName("comboBox_knn_algorithm")
        self.comboBox_knn_algorithm.addItem("")
        self.comboBox_knn_algorithm.addItem("")
        self.comboBox_knn_algorithm.addItem("")
        self.comboBox_knn_algorithm.addItem("")
        self.gridLayout_4.addWidget(self.comboBox_knn_algorithm, 1, 2, 1, 1)
        self.checkBox_knn_weights = QtWidgets.QCheckBox(self.groupBox_4)
        self.checkBox_knn_weights.setText("")
        self.checkBox_knn_weights.setChecked(True)
        self.checkBox_knn_weights.setObjectName("checkBox_knn_weights")
        self.gridLayout_4.addWidget(self.checkBox_knn_weights, 1, 1, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_4, 1, 0, 1, 3)
        self.groupBox_2 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 0, 1, 1, 1)
        self.doubleSpinBox_alpha = QtWidgets.QDoubleSpinBox(self.groupBox_2)
        self.doubleSpinBox_alpha.setDecimals(1)
        self.doubleSpinBox_alpha.setProperty("value", 0.5)
        self.doubleSpinBox_alpha.setObjectName("doubleSpinBox_alpha")
        self.gridLayout_3.addWidget(self.doubleSpinBox_alpha, 1, 0, 1, 1)
        self.doubleSpinBox_l1_ratio = QtWidgets.QDoubleSpinBox(self.groupBox_2)
        self.doubleSpinBox_l1_ratio.setDecimals(2)
        self.doubleSpinBox_l1_ratio.setMaximum(1.0)
        self.doubleSpinBox_l1_ratio.setProperty("value", 0.5)
        self.doubleSpinBox_l1_ratio.setObjectName("doubleSpinBox_l1_ratio")
        self.gridLayout_3.addWidget(self.doubleSpinBox_l1_ratio, 1, 1, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_2, 1, 3, 1, 1)
        self.groupBox_5 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setObjectName("label_3")
        self.gridLayout_5.addWidget(self.label_3, 0, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox_5)
        self.label_4.setObjectName("label_4")
        self.gridLayout_5.addWidget(self.label_4, 0, 1, 1, 1)
        self.comboBox_svr_kernel = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_svr_kernel.setObjectName("comboBox_svr_kernel")
        self.comboBox_svr_kernel.addItem("")
        self.comboBox_svr_kernel.addItem("")
        self.comboBox_svr_kernel.addItem("")
        self.comboBox_svr_kernel.addItem("")
        self.comboBox_svr_kernel.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_svr_kernel, 1, 0, 1, 1)
        self.doubleSpinBox_svr_c = QtWidgets.QDoubleSpinBox(self.groupBox_5)
        self.doubleSpinBox_svr_c.setMinimum(0.01)
        self.doubleSpinBox_svr_c.setProperty("value", 10.0)
        self.doubleSpinBox_svr_c.setObjectName("doubleSpinBox_svr_c")
        self.gridLayout_5.addWidget(self.doubleSpinBox_svr_c, 1, 1, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_5, 2, 0, 1, 1)
        self.groupBox_6 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_6.setObjectName("groupBox_6")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_6)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_5 = QtWidgets.QLabel(self.groupBox_6)
        self.label_5.setObjectName("label_5")
        self.gridLayout_6.addWidget(self.label_5, 0, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.groupBox_6)
        self.label_6.setObjectName("label_6")
        self.gridLayout_6.addWidget(self.label_6, 0, 1, 1, 1)
        self.doubleSpinBox_learning_rate = QtWidgets.QDoubleSpinBox(self.groupBox_6)
        self.doubleSpinBox_learning_rate.setMinimum(0.01)
        self.doubleSpinBox_learning_rate.setSingleStep(0.1)
        self.doubleSpinBox_learning_rate.setProperty("value", 0.5)
        self.doubleSpinBox_learning_rate.setObjectName("doubleSpinBox_learning_rate")
        self.gridLayout_6.addWidget(self.doubleSpinBox_learning_rate, 1, 0, 1, 1)
        self.spinBox_n_estimators = QtWidgets.QSpinBox(self.groupBox_6)
        self.spinBox_n_estimators.setMinimum(1)
        self.spinBox_n_estimators.setMaximum(1000)
        self.spinBox_n_estimators.setSingleStep(50)
        self.spinBox_n_estimators.setProperty("value", 200)
        self.spinBox_n_estimators.setObjectName("spinBox_n_estimators")
        self.gridLayout_6.addWidget(self.spinBox_n_estimators, 1, 1, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_6, 2, 3, 1, 1)
        self.groupBox_7 = QtWidgets.QGroupBox(Form_formation_ai)
        self.groupBox_7.setObjectName("groupBox_7")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.groupBox_7)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_31 = QtWidgets.QLabel(self.groupBox_7)
        self.label_31.setObjectName("label_31")
        self.gridLayout_7.addWidget(self.label_31, 0, 0, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.groupBox_7)
        self.label_32.setObjectName("label_32")
        self.gridLayout_7.addWidget(self.label_32, 0, 1, 1, 1)
        self.label_33 = QtWidgets.QLabel(self.groupBox_7)
        self.label_33.setObjectName("label_33")
        self.gridLayout_7.addWidget(self.label_33, 0, 2, 1, 1)
        self.label_34 = QtWidgets.QLabel(self.groupBox_7)
        self.label_34.setObjectName("label_34")
        self.gridLayout_7.addWidget(self.label_34, 0, 3, 1, 1)
        self.label_35 = QtWidgets.QLabel(self.groupBox_7)
        self.label_35.setObjectName("label_35")
        self.gridLayout_7.addWidget(self.label_35, 0, 4, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.groupBox_7)
        self.label_19.setObjectName("label_19")
        self.gridLayout_7.addWidget(self.label_19, 0, 5, 1, 1)
        self.lineEdit_layer_mlp = QtWidgets.QLineEdit(self.groupBox_7)
        self.lineEdit_layer_mlp.setObjectName("lineEdit_layer_mlp")
        self.gridLayout_7.addWidget(self.lineEdit_layer_mlp, 1, 0, 1, 1)
        self.comboBox_activation_mlp = QtWidgets.QComboBox(self.groupBox_7)
        self.comboBox_activation_mlp.setObjectName("comboBox_activation_mlp")
        self.comboBox_activation_mlp.addItem("")
        self.comboBox_activation_mlp.addItem("")
        self.comboBox_activation_mlp.addItem("")
        self.comboBox_activation_mlp.addItem("")
        self.gridLayout_7.addWidget(self.comboBox_activation_mlp, 1, 1, 1, 1)
        self.comboBox_solvar_mlp = QtWidgets.QComboBox(self.groupBox_7)
        self.comboBox_solvar_mlp.setObjectName("comboBox_solvar_mlp")
        self.comboBox_solvar_mlp.addItem("")
        self.comboBox_solvar_mlp.addItem("")
        self.comboBox_solvar_mlp.addItem("")
        self.gridLayout_7.addWidget(self.comboBox_solvar_mlp, 1, 2, 1, 1)
        self.doubleSpinBox_alpha_mlp = QtWidgets.QDoubleSpinBox(self.groupBox_7)
        self.doubleSpinBox_alpha_mlp.setDecimals(4)
        self.doubleSpinBox_alpha_mlp.setMaximum(100.0)
        self.doubleSpinBox_alpha_mlp.setSingleStep(0.1)
        self.doubleSpinBox_alpha_mlp.setProperty("value", 0.0001)
        self.doubleSpinBox_alpha_mlp.setObjectName("doubleSpinBox_alpha_mlp")
        self.gridLayout_7.addWidget(self.doubleSpinBox_alpha_mlp, 1, 3, 1, 1)
        self.doubleSpinBox_valid_mlp = QtWidgets.QDoubleSpinBox(self.groupBox_7)
        self.doubleSpinBox_valid_mlp.setDecimals(1)
        self.doubleSpinBox_valid_mlp.setMaximum(1.0)
        self.doubleSpinBox_valid_mlp.setSingleStep(0.1)
        self.doubleSpinBox_valid_mlp.setProperty("value", 0.1)
        self.doubleSpinBox_valid_mlp.setObjectName("doubleSpinBox_valid_mlp")
        self.gridLayout_7.addWidget(self.doubleSpinBox_valid_mlp, 1, 4, 1, 1)
        self.checkBox_e_stop_mlp = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_e_stop_mlp.setText("")
        self.checkBox_e_stop_mlp.setChecked(True)
        self.checkBox_e_stop_mlp.setObjectName("checkBox_e_stop_mlp")
        self.gridLayout_7.addWidget(self.checkBox_e_stop_mlp, 1, 5, 1, 1)
        self.gridLayout_8.addWidget(self.groupBox_7, 3, 0, 1, 4)
        self.comboBox_model_ai = QtWidgets.QComboBox(Form_formation_ai)
        self.comboBox_model_ai.setObjectName("comboBox_model_ai")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.comboBox_model_ai.addItem("")
        self.gridLayout_8.addWidget(self.comboBox_model_ai, 4, 0, 1, 1)
        self.pushButton_calc_model = QtWidgets.QPushButton(Form_formation_ai)
        self.pushButton_calc_model.setObjectName("pushButton_calc_model")
        self.gridLayout_8.addWidget(self.pushButton_calc_model, 4, 1, 1, 1)

        self.retranslateUi(Form_formation_ai)
        self.comboBox_solvar_mlp.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Form_formation_ai)

    def retranslateUi(self, Form_formation_ai):
        _translate = QtCore.QCoreApplication.translate
        Form_formation_ai.setWindowTitle(_translate("Form_formation_ai", "Formation AI"))
        self.groupBox.setTitle(_translate("Form_formation_ai", "LinearRegression"))
        self.checkBox_fit_intercept.setToolTip(_translate("Form_formation_ai", "Определяет, нужно ли добавлять свободный член (пересечение) в модель. Если fit_intercept включен, то модель будет иметь угол наклона и свободный член (смещение). Если fit_intercept отключен, то угол наклона будет определен без свободного члена."))
        self.checkBox_fit_intercept.setText(_translate("Form_formation_ai", "fit_intercept"))
        self.groupBox_3.setTitle(_translate("Form_formation_ai", "DecisionTreeRegressor"))
        self.checkBox_splitter_rnd.setToolTip(_translate("Form_formation_ai", "Стратегия, используемая для выбора разделения в узлах. Возможные значения - \"best\" (выбирается лучшее разделение) или \"random\" (выбирается случайное разделение)"))
        self.checkBox_splitter_rnd.setText(_translate("Form_formation_ai", "splitter random"))
        self.groupBox_4.setTitle(_translate("Form_formation_ai", "KNeighborsRegressor"))
        self.label_41.setToolTip(_translate("Form_formation_ai", "Если выключено, все ближайшие соседи вносят одинаковый вклад в прогноз, если включено вклад каждого соседа зависит от его расстояния до целевой точки."))
        self.label_41.setText(_translate("Form_formation_ai", "weights distanse:"))
        self.label_36.setToolTip(_translate("Form_formation_ai", "Выбор определенного алгоритма может ускорить вычисления для больших данных"))
        self.label_36.setText(_translate("Form_formation_ai", "algorithm:"))
        self.label_39.setAccessibleName(_translate("Form_formation_ai", "Количество ближайших соседей, которые будут использованы для прогнозирования значения."))
        self.label_39.setText(_translate("Form_formation_ai", "N neighbors:"))
        self.spinBox_neighbors.setAccessibleName(_translate("Form_formation_ai", "Количество ближайших соседей, которые будут использованы для прогнозирования значения."))
        self.comboBox_knn_algorithm.setToolTip(_translate("Form_formation_ai", "Выбор определенного алгоритма может ускорить вычисления для больших данных"))
        self.comboBox_knn_algorithm.setItemText(0, _translate("Form_formation_ai", "auto"))
        self.comboBox_knn_algorithm.setItemText(1, _translate("Form_formation_ai", "ball_tree"))
        self.comboBox_knn_algorithm.setItemText(2, _translate("Form_formation_ai", "kd_tree"))
        self.comboBox_knn_algorithm.setItemText(3, _translate("Form_formation_ai", "brute"))
        self.checkBox_knn_weights.setToolTip(_translate("Form_formation_ai", "Если выключено, все ближайшие соседи вносят одинаковый вклад в прогноз, если включено вклад каждого соседа зависит от его расстояния до целевой точки."))
        self.groupBox_2.setTitle(_translate("Form_formation_ai", "ElasticNet, Lasso"))
        self.label.setToolTip(_translate("Form_formation_ai", "Этот параметр контролирует общую силу регуляризации."))
        self.label.setText(_translate("Form_formation_ai", "alpha:"))
        self.label_2.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет смешивание регрессии L1 и L2 в ElasticNet. Значение l1_ratio находится в диапазоне от 0 до 1. Когда l1_ratio = 0, это эквивалентно регрессии L2 (Ridge). Когда l1_ratio = 1, это эквивалентно регрессии L1 (Lasso). При значениях между 0 и 1, это комбинация обеих регрессий."))
        self.label_2.setText(_translate("Form_formation_ai", "l1_ratio:"))
        self.doubleSpinBox_alpha.setToolTip(_translate("Form_formation_ai", "Этот параметр контролирует общую силу регуляризации."))
        self.doubleSpinBox_l1_ratio.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет смешивание регрессии L1 и L2 в ElasticNet. Значение l1_ratio находится в диапазоне от 0 до 1. Когда l1_ratio = 0, это эквивалентно регрессии L2 (Ridge). Когда l1_ratio = 1, это эквивалентно регрессии L1 (Lasso). При значениях между 0 и 1, это комбинация обеих регрессий."))
        self.groupBox_5.setTitle(_translate("Form_formation_ai", "SVR"))
        self.label_3.setToolTip(_translate("Form_formation_ai", "Ядро, которое определяет тип нелинейности в модели. "))
        self.label_3.setText(_translate("Form_formation_ai", "kernel:"))
        self.label_4.setToolTip(_translate("Form_formation_ai", "Параметр регуляризации. Он контролирует компромисс между подгонкой данных и регуляризацией. Меньшие значения C приводят к более сильной регуляризации, что может помочь уменьшить переобучение. Большие значения C уменьшают регуляризацию, что может привести к лучшему соответствию данным."))
        self.label_4.setText(_translate("Form_formation_ai", "C:"))
        self.comboBox_svr_kernel.setToolTip(_translate("Form_formation_ai", "Ядро, которое определяет тип нелинейности в модели. "))
        self.comboBox_svr_kernel.setItemText(0, _translate("Form_formation_ai", "poly"))
        self.comboBox_svr_kernel.setItemText(1, _translate("Form_formation_ai", "rbf"))
        self.comboBox_svr_kernel.setItemText(2, _translate("Form_formation_ai", "linear"))
        self.comboBox_svr_kernel.setItemText(3, _translate("Form_formation_ai", "sigmoid"))
        self.comboBox_svr_kernel.setItemText(4, _translate("Form_formation_ai", "precomputed"))
        self.doubleSpinBox_svr_c.setToolTip(_translate("Form_formation_ai", "Параметр регуляризации. Он контролирует компромисс между подгонкой данных и регуляризацией. Меньшие значения C приводят к более сильной регуляризации, что может помочь уменьшить переобучение. Большие значения C уменьшают регуляризацию, что может привести к лучшему соответствию данным."))
        self.groupBox_6.setTitle(_translate("Form_formation_ai", "GradientBoostingRegressor"))
        self.label_5.setToolTip(_translate("Form_formation_ai", "Этот параметр контролирует величину шага при обновлении весов моделей на каждой итерации бустинга. Меньшие значения learning_rate требуют большего числа деревьев для достижения хорошей точности, но могут улучшить устойчивость модели."))
        self.label_5.setText(_translate("Form_formation_ai", "learning_rate:"))
        self.label_6.setToolTip(_translate("Form_formation_ai", "Это количество базовых моделей (например, деревьев решений), которые будут объединены для создания финальной модели. Большее количество деревьев может улучшить точность модели, но также увеличит время обучения. "))
        self.label_6.setText(_translate("Form_formation_ai", "n_estimators:"))
        self.doubleSpinBox_learning_rate.setToolTip(_translate("Form_formation_ai", "Этот параметр контролирует величину шага при обновлении весов моделей на каждой итерации бустинга. Меньшие значения learning_rate требуют большего числа деревьев для достижения хорошей точности, но могут улучшить устойчивость модели."))
        self.spinBox_n_estimators.setToolTip(_translate("Form_formation_ai", "Это количество базовых моделей (например, деревьев решений), которые будут объединены для создания финальной модели. Большее количество деревьев может улучшить точность модели, но также увеличит время обучения. "))
        self.groupBox_7.setTitle(_translate("Form_formation_ai", "MLPRegressor"))
        self.label_31.setToolTip(_translate("Form_formation_ai", "Это кортеж, определяющий количество нейронов в каждом скрытом слое. Например, \"100\" означает один скрытый слой с 100 нейронами, а \"50 30\" означает два скрытых слоя, в первом 50 нейронов, во втором - 30 нейронов. Вы можете экспериментировать с различными комбинациями слоев и нейронов, чтобы получить лучшие результаты."))
        self.label_31.setText(_translate("Form_formation_ai", "hidden layer"))
        self.label_32.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет функцию активации для скрытых слоев. Функция активации добавляет нелинейность в модель, что позволяет ей обучаться сложным зависимостям в данных."))
        self.label_32.setText(_translate("Form_formation_ai", "activat"))
        self.label_33.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет метод оптимизации весов в нейронной сети. "))
        self.label_33.setText(_translate("Form_formation_ai", "solver"))
        self.label_34.setToolTip(_translate("Form_formation_ai", "Параметр регуляризации L2 (гребневая регрессия). Он помогает предотвратить переобучение, уменьшая веса нейронов. "))
        self.label_34.setText(_translate("Form_formation_ai", "alpha"))
        self.label_35.setToolTip(_translate("Form_formation_ai", "Параметр контролирует долю данных, которые будут отложены (зарезервированы) для проверки модели на каждой итерации обучения. Когда модель обучается на обучающем наборе данных, она может использовать валидационный набор для оценки качества обучения на каждой эпохе. Это позволяет отслеживать процесс обучения и раннее обнаруживать переобучение или недообучение."))
        self.label_35.setText(_translate("Form_formation_ai", "valid %"))
        self.label_19.setToolTip(_translate("Form_formation_ai", "Если включено, процесс обучения будет автоматически прекращен, когда метрика качества на валидационном наборе перестанет улучшаться после некоторого числа итераций (эпох). Другими словами, обучение будет остановлено, когда модель начнет переобучаться и метрика качества на валидационном наборе начнет ухудшаться."))
        self.label_19.setText(_translate("Form_formation_ai", "e-stop"))
        self.lineEdit_layer_mlp.setToolTip(_translate("Form_formation_ai", "Это кортеж, определяющий количество нейронов в каждом скрытом слое. Например, \"100\" означает один скрытый слой с 100 нейронами, а \"50 30\" означает два скрытых слоя, в первом 50 нейронов, во втором - 30 нейронов. Вы можете экспериментировать с различными комбинациями слоев и нейронов, чтобы получить лучшие результаты."))
        self.lineEdit_layer_mlp.setText(_translate("Form_formation_ai", "500"))
        self.comboBox_activation_mlp.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет функцию активации для скрытых слоев. Функция активации добавляет нелинейность в модель, что позволяет ей обучаться сложным зависимостям в данных."))
        self.comboBox_activation_mlp.setItemText(0, _translate("Form_formation_ai", "relu"))
        self.comboBox_activation_mlp.setItemText(1, _translate("Form_formation_ai", "logistic"))
        self.comboBox_activation_mlp.setItemText(2, _translate("Form_formation_ai", "tanh"))
        self.comboBox_activation_mlp.setItemText(3, _translate("Form_formation_ai", "identity"))
        self.comboBox_solvar_mlp.setToolTip(_translate("Form_formation_ai", "Этот параметр определяет метод оптимизации весов в нейронной сети. "))
        self.comboBox_solvar_mlp.setItemText(0, _translate("Form_formation_ai", "adam"))
        self.comboBox_solvar_mlp.setItemText(1, _translate("Form_formation_ai", "lbfgs"))
        self.comboBox_solvar_mlp.setItemText(2, _translate("Form_formation_ai", "sgd"))
        self.doubleSpinBox_alpha_mlp.setToolTip(_translate("Form_formation_ai", "Параметр регуляризации L2 (гребневая регрессия). Он помогает предотвратить переобучение, уменьшая веса нейронов. "))
        self.doubleSpinBox_valid_mlp.setToolTip(_translate("Form_formation_ai", "Параметр контролирует долю данных, которые будут отложены (зарезервированы) для проверки модели на каждой итерации обучения. Когда модель обучается на обучающем наборе данных, она может использовать валидационный набор для оценки качества обучения на каждой эпохе. Это позволяет отслеживать процесс обучения и раннее обнаруживать переобучение или недообучение."))
        self.checkBox_e_stop_mlp.setToolTip(_translate("Form_formation_ai", "Если включено, процесс обучения будет автоматически прекращен, когда метрика качества на валидационном наборе перестанет улучшаться после некоторого числа итераций (эпох). Другими словами, обучение будет остановлено, когда модель начнет переобучаться и метрика качества на валидационном наборе начнет ухудшаться."))
        self.comboBox_model_ai.setItemText(0, _translate("Form_formation_ai", "LinearRegression"))
        self.comboBox_model_ai.setItemText(1, _translate("Form_formation_ai", "Lasso"))
        self.comboBox_model_ai.setItemText(2, _translate("Form_formation_ai", "ElasticNet"))
        self.comboBox_model_ai.setItemText(3, _translate("Form_formation_ai", "DecisionTreeRegressor"))
        self.comboBox_model_ai.setItemText(4, _translate("Form_formation_ai", "KNeighborsRegressor"))
        self.comboBox_model_ai.setItemText(5, _translate("Form_formation_ai", "SVR"))
        self.comboBox_model_ai.setItemText(6, _translate("Form_formation_ai", "MLPRegressor"))
        self.comboBox_model_ai.setItemText(7, _translate("Form_formation_ai", "GradientBoostingRegressor"))
        self.pushButton_calc_model.setText(_translate("Form_formation_ai", "Calc model"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form_formation_ai = QtWidgets.QWidget()
    ui = Ui_Form_formation_ai()
    ui.setupUi(Form_formation_ai)
    Form_formation_ai.show()
    sys.exit(app.exec_())
